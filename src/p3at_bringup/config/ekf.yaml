### ekf config file ###
ekf_filter_node:
    ros__parameters:
        frequency: 30.0
        two_d_mode: true
        publish_tf: true

        map_frame: map              # Defaults to "map" if unspecified
        odom_frame: odom            # Defaults to "odom" if unspecified
        base_link_frame: base_link  # Defaults to "base_link" if unspecified
        world_frame: odom           # Defaults to the value of odom_frame if unspecified

        # odom0: example/odom

        # odom0_config: [true,  true,  false,
        #                false, false, false,
        #                false, false, false,
        #                false, false, true,
        #                false, false, false]

        # odom0_queue_size: 2

        # odom0_differential: false
        # odom0_relative: false
        # odom0_pose_use_child_frame: false
        # odom0_pose_rejection_threshold: 5.0
        # odom0_twist_rejection_threshold: 1.0

        imu0: imu/data_raw
        imu0_config: [false, false, false,
                      false,  false,  true,
                      false, false, false,
                      false,  false,  true,
                      true,  false,  false]
        imu0_differential: false
        imu0_relative: false
        imu0_queue_size: 10
        imu0_pose_rejection_threshold: 10.0           # Note the difference in parameter names
        imu0_twist_rejection_threshold: 0.8                #
        imu0_linear_acceleration_rejection_threshold: 0.8  #

        # [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
        # this to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
        imu0_remove_gravitational_acceleration: false

        # [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
        # acceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
        # correction, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
        # problematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
        # this velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
        # noticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
        # for the velocity variable in question, or decrease the  variance of the variable in question in the measurement
        # itself. In addition, users can also take advantage of the control command being issued to the robot at the time we
        # make the prediction. If control is used, it will get converted into an acceleration term, which will be used during
        # predicition. Note that if an acceleration measurement for the variable in question is available from one of the
        # inputs, the control term will be ignored.
        # Whether or not we use the control input during predicition. Defaults to false.
        # use_control: true

        # Whether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. Defaults to
        # false.
        stamped_control: false

        # The last issued control command will be used in prediction for this period. Defaults to 0.2.
        control_timeout: 0.2

        # Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
        control_config: [true, false, false, false, false, true]

        # Places limits on how large the acceleration term will be. Should match your robot's kinematics.
        acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]

        # Acceleration and deceleration limits are not always the same for robots.
        deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]

        # If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
        # gains
        acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]

        # If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
        # gains
        deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

        process_noise_covariance: [0.05, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.05, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.06, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.03, 0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.03, 0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.06, 0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025, 0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01, 0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01, 0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.02, 0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01, 0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01, 0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]
